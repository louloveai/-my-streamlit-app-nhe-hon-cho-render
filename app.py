import streamlit as st
from transformers import pipeline
import logging
import torch
import random
from googletrans import GoogleTranslator
from googlesearch import search
import requests
from bs4 import BeautifulSoup
import re

class MentalHealthApp:
    def __init__(self):
        self.setup_models()
        self.google_search = GoogleSearch()
        if 'messages' not in st.session_state:
            st.session_state.messages = []
        # Th√™m context memory
        self.context_memory = {
            "last_emotion": None,
            "conversation_topics": [],
            "therapy_progress": {}
        }

    def setup_models(self):
        """Kh·ªüi t·∫°o c√°c models AI"""
        try:
            self.analyzer = pipeline(
                "sentiment-analysis",
                model="distilbert-base-uncased-finetuned-sst-2-english"
            )
            self.translator = GoogleTranslator(source='vi', target='en')
            
            # Th√™m responses th√¥ng minh v·ªõi ki·∫øn th·ª©c t√¢m l√Ω
            self.responses = {
                "POSITIVE": [
                    "Th·∫≠t tuy·ªát v·ªùi! C·∫£m x√∫c t√≠ch c·ª±c s·∫Ω gi√∫p tƒÉng endorphin - hormone h·∫°nh ph√∫c trong c∆° th·ªÉ b·∫°n.",
                    "Khi b·∫°n vui, n√£o b·ªô s·∫Ω ti·∫øt ra serotonin. H√£y duy tr√¨ nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y nh√©!",
                    "Ni·ªÅm vui c·ªßa b·∫°n l√† m·ªôt ph·∫ßn quan tr·ªçng trong h√†nh tr√¨nh ch·ªØa l√†nh. H√£y tr√¢n tr·ªçng kho·∫£nh kh·∫Øc n√†y.",
                    "T√¥i r·∫•t vui khi th·∫•y nƒÉng l∆∞·ª£ng t√≠ch c·ª±c c·ªßa b·∫°n. ƒêi·ªÅu n√†y r·∫•t t·ªët cho qu√° tr√¨nh ch·ªØa l√†nh.",
                    "C·∫£m x√∫c t√≠ch c·ª±c gi√∫p gi·∫£i ph√≥ng endorphin - hormone h·∫°nh ph√∫c trong c∆° th·ªÉ b·∫°n.",
                    "H√£y gi·ªØ v·ªØng tinh th·∫ßn n√†y nh√©! M·ªói kho·∫£nh kh·∫Øc t√≠ch c·ª±c ƒë·ªÅu r·∫•t qu√Ω gi√°."
                    "T√¥i r·∫•t vui khi th·∫•y b·∫°n c√≥ tr·∫°ng th√°i t√≠ch c·ª±c. ƒêi·ªÅu n√†y r·∫•t t·ªët cho s·ª©c kh·ªèe tinh th·∫ßn."
                ],
                "NEGATIVE": [
                    "T√¥i hi·ªÉu c·∫£m gi√°c ƒë√≥. ƒê√¥i khi, ch·∫•p nh·∫≠n c·∫£m x√∫c ti√™u c·ª±c c≈©ng l√† m·ªôt ph·∫ßn c·ªßa qu√° tr√¨nh ch·ªØa l√†nh.",
                    "H√£y th·ª≠ ph∆∞∆°ng ph√°p th·ªü s√¢u 4-7-8: H√≠t v√†o 4 gi√¢y, gi·ªØ 7 gi√¢y, v√† th·ªü ra 8 gi√¢y. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n b√¨nh tƒ©nh h∆°n.",
                    "B·∫°n bi·∫øt kh√¥ng, c·∫£m x√∫c ti√™u c·ª±c c≈©ng l√† m·ªôt ph·∫ßn t·ª± nhi√™n c·ªßa con ng∆∞·ªùi. ƒê·ª´ng qu√° kh·∫Øt khe v·ªõi b·∫£n th√¢n.",
                    "Trong t√¢m l√Ω h·ªçc, ch√∫ng ta g·ªçi ƒë√¢y l√† kho·∫£nh kh·∫Øc c·∫ßn ƒë∆∞·ª£c l·∫Øng nghe v√† th·∫•u hi·ªÉu. B·∫°n mu·ªën chia s·∫ª th√™m kh√¥ng?"
                ]
            }

            # Th√™m t·ª´ ƒëi·ªÉn ch·ªß ƒë·ªÅ t√¢m l√Ω
            self.therapy_topics = {
                "stress": {
                    "gi·∫£i th√≠ch": "Stress k√©o d√†i c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c·∫£ th·ªÉ ch·∫•t v√† tinh th·∫ßn",
                    "gi·∫£i ph√°p": "H√£y th·ª≠ c√°c b√†i t·∫≠p th∆∞ gi√£n ƒë∆°n gi·∫£n, thi·ªÅn ƒë·ªãnh 10 ph√∫t m·ªói ng√†y"
                },
                "anxiety": {
                    "gi·∫£i th√≠ch": "Lo √¢u l√† ph·∫£n ·ª©ng t·ª± nhi√™n c·ªßa c∆° th·ªÉ tr∆∞·ªõc c√°c t√¨nh hu·ªëng cƒÉng th·∫≥ng",
                    "gi·∫£i ph√°p": "Th·ªü s√¢u v√† thi·ªÅn ƒë·ªãnh c√≥ th·ªÉ gi√∫p √≠ch, t·∫≠p trung v√†o hi·ªán t·∫°i"
                },
                "depression": {
                    "gi·∫£i th√≠ch": "Tr·∫ßm c·∫£m l√† m·ªôt t√¨nh tr·∫°ng c·∫ßn ƒë∆∞·ª£c quan t√¢m v√† ƒëi·ªÅu tr·ªã",
                    "gi·∫£i ph√°p": "ƒê·ª´ng ng·∫ßn ng·∫°i t√¨m s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia, duy tr√¨ c√°c ho·∫°t ƒë·ªông y√™u th√≠ch"
                },
                "healing": {
                    "gi·∫£i th√≠ch": "Ch·ªØa l√†nh l√† m·ªôt h√†nh tr√¨nh, kh√¥ng ph·∫£i ƒë√≠ch ƒë·∫øn",
                    "gi·∫£i ph√°p": "M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu c√≥ √Ω nghƒ©a, h√£y ki√™n nh·∫´n v·ªõi b·∫£n th√¢n"
                },
                "m·∫•t ng·ªß": {
                    "gi·∫£i th√≠ch": "M·∫•t ng·ªß ·∫£nh h∆∞·ªüng ƒë·∫øn ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng v√† s·ª©c kh·ªèe tinh th·∫ßn",
                    "gi·∫£i ph√°p": "Thi·∫øt l·∫≠p th√≥i quen ng·ªß, tr√°nh caffeine, th·ª±c h√†nh thi·ªÅn tr∆∞·ªõc khi ng·ªß"
                },
                "c√¥ ƒë∆°n": {
                    "gi·∫£i th√≠ch": "C√¥ ƒë∆°n l√† c·∫£m gi√°c thi·∫øu k·∫øt n·ªëi v·ªõi ng∆∞·ªùi kh√°c",
                    "gi·∫£i ph√°p": "Tham gia c√°c ho·∫°t ƒë·ªông x√£ h·ªôi, chia s·∫ª v·ªõi b·∫°n b√®, t√¨m s·ªü th√≠ch m·ªõi"
                },
                "t·ªïn th∆∞∆°ng": {
                    "gi·∫£i th√≠ch": "T·ªïn th∆∞∆°ng t√¢m l√Ω c·∫ßn th·ªùi gian ƒë·ªÉ ch·ªØa l√†nh",
                    "gi·∫£i ph√°p": "Vi·∫øt nh·∫≠t k√Ω, tham v·∫•n chuy√™n gia, th·ª±c h√†nh self-care m·ªói ng√†y"
                }
            }

        except Exception as e:
            logging.error(f"‚ùå Model initialization error: {e}")

    def analyze_emotion(self, text):
        """Ph√¢n t√≠ch c·∫£m x√∫c v·ªõi DistilBERT"""
        try:
            english_text = self.translator.translate(text)
            result = self.analyzer(english_text)
            return result['label'].lower()
        except Exception as e:
            logging.error(f"L·ªói ph√¢n t√≠ch c·∫£m x√∫c: {e}")
            return "neutral"

    def get_response(self, emotion, text):
        """T·∫°o ph·∫£n h·ªìi th√¥ng minh v·ªõi kh·∫£ nƒÉng search"""
        response = random.choice(self.responses[emotion])
        
        # Ki·ªÉm tra n·∫øu c·∫ßn search
        if any(keyword in text.lower() for keyword in ["t√¨m ki·∫øm", "search", "tra c·ª©u", "t√¨m hi·ªÉu"]):
            search_results = self.google_search.search_and_summarize(text)
            if search_results:
                response += "\n\nT√¥i ƒë√£ t√¨m th·∫•y m·ªôt s·ªë th√¥ng tin li√™n quan:\n"
                for idx, result in enumerate(search_results, 1):
                    response += f"\n{idx}. {result}\n"
        
        # Th√™m l·ªùi khuy√™n t√¢m l√Ω n·∫øu ph√π h·ª£p
        for topic, advice in self.therapy_topics.items():
            if topic in text.lower():
                response += f"\n\n{advice['gi·∫£i th√≠ch']}. {advice['gi·∫£i ph√°p']}"
                
                # Ch·ªß ƒë·ªông search th√™m th√¥ng tin
                search_query = f"c√°ch ƒëi·ªÅu tr·ªã {topic} t√¢m l√Ω h·ªçc"
                extra_info = self.google_search.search_and_summarize(search_query, num_results=1)
                if extra_info:
                    response += f"\n\nTh√¥ng tin b·ªï sung: {extra_info[0]}"
                break
            
        return response

    def setup_streamlit(self):
        # B·ªè dark/light mode toggle, ch·ªâ d√πng dark theme
        st.markdown(
            """
            <style>
            /* M√†u n·ªÅn ƒëen v√† ch·ªØ tr·∫Øng */
            .stApp {
                background-color: black !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho t·∫•t c·∫£ text */
            .stApp, .stMarkdown, .stTextInput, p, h1, h2, h3 {
                color: white !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho input */
            .stTextInput > div > div > input {
                color: white !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho chat messages */
            .stChatMessage {
                color: white !important;
                background-color: rgba(255, 255, 255, 0.1) !important;
            }
            </style>
            """, unsafe_allow_html=True
        )
        st.title("üåø AI Ch·ªØa L√†nh")

        if prompt := st.chat_input("Chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n..."):
            emotion = self.analyze_emotion(prompt)
            response = self.get_response(emotion, prompt)
            st.session_state.messages.append({"role": "assistant", "content": response})
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])

    def update_context(self, emotion, text):
        """C·∫≠p nh·∫≠t context c·ªßa cu·ªôc tr√≤ chuy·ªán"""
        self.context_memory["last_emotion"] = emotion
        # Theo d√µi ch·ªß ƒë·ªÅ
        for topic in self.therapy_topics.keys():
            if topic in text.lower():
                self.context_memory["conversation_topics"].append(topic)
        # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
        self.context_memory["therapy_progress"][emotion] = \
            self.context_memory["therapy_progress"].get(emotion, 0) + 1

class GoogleSearch:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

    def search_and_summarize(self, query, num_results=3):
        """T√¨m ki·∫øm Google v√† t√≥m t·∫Øt k·∫øt qu·∫£"""
        try:
            results = []
            search_results = search(query, num_results=num_results)
            
            for url in search_results:
                try:
                    response = requests.get(url, headers=self.headers, timeout=5)
                    soup = BeautifulSoup(response.text, 'html.parser')
                    
                    # L·∫•y text t·ª´ c√°c th·∫ª p
                    paragraphs = soup.find_all('p')
                    text = ' '.join([p.text for p in paragraphs])
                    
                    # L√†m s·∫°ch text
                    text = re.sub(r'\s+', ' ', text).strip()
                    if text:
                        results.append(text[:500])  # Gi·ªõi h·∫°n ƒë·ªô d√†i
                except:
                    continue
                    
            return results
        except Exception as e:
            logging.error(f"Search error: {e}")
            return []

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = MentalHealthApp()
    app.run()

