mlit as st
from transformers import pipeline
import logging
import torch
import random
from googletrans import GoogleTranslator

class MentalHealthApp:
    def __init__(self):
        self.setup_models()
        self.setup_memory()

    def setup_models(self):
        """Kh·ªüi t·∫°o c√°c models AI"""
        try:
            self.analyzer = pipeline(
                "sentiment-analysis",
                model="distilbert-base-uncased-finetuned-sst-2-english"
            )
            self.translator = GoogleTranslator(source='vi', target='en')
            
            # Th√™m responses th√¥ng minh v·ªõi ki·∫øn th·ª©c t√¢m l√Ω
            self.responses = {
                "POSITIVE": [
                    "Th·∫≠t tuy·ªát v·ªùi! C·∫£m x√∫c t√≠ch c·ª±c s·∫Ω gi√∫p tƒÉng endorphin - hormone h·∫°nh ph√∫c trong c∆° th·ªÉ b·∫°n.",
                    "Khi b·∫°n vui, n√£o b·ªô s·∫Ω ti·∫øt ra serotonin. H√£y duy tr√¨ nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y nh√©!",
                    "Ni·ªÅm vui c·ªßa b·∫°n l√† m·ªôt ph·∫ßn quan tr·ªçng trong h√†nh tr√¨nh ch·ªØa l√†nh. H√£y tr√¢n tr·ªçng kho·∫£nh kh·∫Øc n√†y.",
                    "T√¥i r·∫•t vui khi th·∫•y nƒÉng l∆∞·ª£ng t√≠ch c·ª±c c·ªßa b·∫°n. ƒêi·ªÅu n√†y r·∫•t t·ªët cho qu√° tr√¨nh ch·ªØa l√†nh.",
                    "C·∫£m x√∫c t√≠ch c·ª±c gi√∫p gi·∫£i ph√≥ng endorphin - hormone h·∫°nh ph√∫c trong c∆° th·ªÉ b·∫°n.",
                    "H√£y gi·ªØ v·ªØng tinh th·∫ßn n√†y nh√©! M·ªói kho·∫£nh kh·∫Øc t√≠ch c·ª±c ƒë·ªÅu r·∫•t qu√Ω gi√°."
                    "T√¥i r·∫•t vui khi th·∫•y b·∫°n c√≥ tr·∫°ng th√°i t√≠ch c·ª±c. ƒêi·ªÅu n√†y r·∫•t t·ªët cho s·ª©c kh·ªèe tinh th·∫ßn."
                ],
                "NEGATIVE": [
                    "T√¥i hi·ªÉu c·∫£m gi√°c ƒë√≥. ƒê√¥i khi, ch·∫•p nh·∫≠n c·∫£m x√∫c ti√™u c·ª±c c≈©ng l√† m·ªôt ph·∫ßn c·ªßa qu√° tr√¨nh ch·ªØa l√†nh.",
                    "H√£y th·ª≠ ph∆∞∆°ng ph√°p th·ªü s√¢u 4-7-8: H√≠t v√†o 4 gi√¢y, gi·ªØ 7 gi√¢y, v√† th·ªü ra 8 gi√¢y. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n b√¨nh tƒ©nh h∆°n.",
                    "B·∫°n bi·∫øt kh√¥ng, c·∫£m x√∫c ti√™u c·ª±c c≈©ng l√† m·ªôt ph·∫ßn t·ª± nhi√™n c·ªßa con ng∆∞·ªùi. ƒê·ª´ng qu√° kh·∫Øt khe v·ªõi b·∫£n th√¢n.",
                    "Trong t√¢m l√Ω h·ªçc, ch√∫ng ta g·ªçi ƒë√¢y l√† kho·∫£nh kh·∫Øc c·∫ßn ƒë∆∞·ª£c l·∫Øng nghe v√† th·∫•u hi·ªÉu. B·∫°n mu·ªën chia s·∫ª th√™m kh√¥ng?"
                ]
            }

            # Th√™m t·ª´ ƒëi·ªÉn ch·ªß ƒë·ªÅ t√¢m l√Ω
            self.therapy_topics = {
                "stress": "Stress k√©o d√†i c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn c·∫£ th·ªÉ ch·∫•t v√† tinh th·∫ßn. H√£y th·ª≠ c√°c b√†i t·∫≠p th∆∞ gi√£n ƒë∆°n gi·∫£n.",
                "anxiety": "Lo √¢u l√† ph·∫£n ·ª©ng t·ª± nhi√™n c·ªßa c∆° th·ªÉ tr∆∞·ªõc c√°c t√¨nh hu·ªëng cƒÉng th·∫≥ng. Th·ªü s√¢u v√† thi·ªÅn ƒë·ªãnh c√≥ th·ªÉ gi√∫p √≠ch.",
                "depression": "Tr·∫ßm c·∫£m l√† m·ªôt t√¨nh tr·∫°ng c·∫ßn ƒë∆∞·ª£c quan t√¢m v√† ƒëi·ªÅu tr·ªã. ƒê·ª´ng ng·∫ßn ng·∫°i t√¨m s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia.",
                "healing": "Ch·ªØa l√†nh l√† m·ªôt h√†nh tr√¨nh, kh√¥ng ph·∫£i ƒë√≠ch ƒë·∫øn. M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu c√≥ √Ω nghƒ©a."
            }

        except Exception as e:
            logging.error(f"‚ùå Model initialization error: {e}")

    def setup_memory(self):
        if 'messages' not in st.session_state:
            st.session_state.messages = []

    def analyze_emotion(self, text):
        """Ph√¢n t√≠ch c·∫£m x√∫c v·ªõi DistilBERT"""
        try:
            english_text = self.translator.translate(text)
            result = self.analyzer(english_text)
            return result['label'].lower()
        except Exception as e:
            logging.error(f"L·ªói ph√¢n t√≠ch c·∫£m x√∫c: {e}")
            return "neutral"

    def get_response(self, emotion, text):
        """T·∫°o ph·∫£n h·ªìi th√¥ng minh d·ª±a tr√™n c·∫£m x√∫c v√† n·ªôi dung"""
        response = random.choice(self.responses[emotion])
        
        # Ph√¢n t√≠ch n·ªôi dung v√† th√™m l·ªùi khuy√™n t√¢m l√Ω n·∫øu ph√π h·ª£p
        for topic, advice in self.therapy_topics.items():
            if topic in text.lower():
                response += f"\n\n{advice}"
                break
            
        return response

    def setup_streamlit(self):
        # B·ªè dark/light mode toggle, ch·ªâ d√πng dark theme
        st.markdown(
            """
            <style>
            /* M√†u n·ªÅn ƒëen v√† ch·ªØ tr·∫Øng */
            .stApp {
                background-color: black !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho t·∫•t c·∫£ text */
            .stApp, .stMarkdown, .stTextInput, p, h1, h2, h3 {
                color: white !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho input */
            .stTextInput > div > div > input {
                color: white !important;
            }
            
            /* M√†u ch·ªØ tr·∫Øng cho chat messages */
            .stChatMessage {
                color: white !important;
                background-color: rgba(255, 255, 255, 0.1) !important;
            }
            </style>
            """, unsafe_allow_html=True
        )
        st.title("üåø AI Ch·ªØa L√†nh")

        if prompt := st.chat_input("Chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n..."):
            emotion = self.analyze_emotion(prompt)
            response = self.get_response(emotion, prompt)
            st.session_state.messages.append({"role": "assistant", "content": response})
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = MentalHealthApp()
    app.run()
